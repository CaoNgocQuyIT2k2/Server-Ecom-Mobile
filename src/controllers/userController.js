const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cloudinary = require("../utils/cloudinaryConfig");
const sendEmail = require("../utils/sendEmail");



// üìå API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
exports.getProfile = async (req, res) => {
  try {
    const token = req.header("Authorization")?.split(" ")[1]; // L·∫•y token t·ª´ headers
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key"); // Gi·∫£i m√£ token

    const user = await User.findOne({ idUser: decoded.idUser }).select("fullName email phone password avatar");
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    console.log(user);
    res.status(200).json({
      message: "L·∫•y th√¥ng tin th√†nh c√¥ng",
      user: {
        fullName: user.fullName,
        email: user.email,
        phone: user.phone,
        password: user.password,
        avatar: user.avatar,
      },
    });
  } catch (error) {
    res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá", error });
  }
};

// // üìå API c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
// exports.editProfile = async (req, res) => {
//   try {
//     const token = req.headers.authorization?.split(" ")[1];
//     if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token, kh√¥ng th·ªÉ x√°c th·ª±c" });

//     let decoded;
//     try {
//       decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key");
//     } catch (error) {
//       return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
//     }

//     const user = await User.findOne({ idUser: decoded.idUser });
//     if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

//     const { fullName, phone, email, password } = req.body;

//     if (email && email !== user.email) {
//       const emailExists = await User.findOne({ email });
//       if (emailExists) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
//       user.email = email;
//     }

//     if (fullName) user.fullName = fullName;
//     if (phone) user.phone = phone;

//     if (password) {
//       const hashedPassword = await bcrypt.hash(password, 10);
//       user.password = hashedPassword;
//     }

//     await user.save();
//     res.status(200).json({ message: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!" });
//   } catch (error) {
//     res.status(500).json({ message: "L·ªói server", error });
//   }
// };

// // üìå API c·∫≠p nh·∫≠t fullname ng∆∞·ªùi d√πng
exports.editFullName= async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token, kh√¥ng th·ªÉ x√°c th·ª±c" });

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key");
    } catch (error) {
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    const user = await User.findOne({ idUser: decoded.idUser });
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const { fullName } = req.body;

    if (fullName) {
      user.fullName = fullName;
      await user.save();
      return res.status(200).json({ message: "C·∫≠p nh·∫≠t h·ªç t√™n th√†nh c√¥ng!" });
    }

    res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};


// üü¢ API Upload avatar
exports.uploadAvatar = async (req, res) => {
  try {
    const token = req.header("Authorization")?.split(" ")[1]; // L·∫•y token t·ª´ headers
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key"); // Gi·∫£i m√£ token

    const user = await User.findOne({ idUser: decoded.idUser });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });

    if (!req.file) return res.status(400).json({ message: "Vui l√≤ng ch·ªçn ·∫£nh" });

    // L∆∞u URL c·ªßa ·∫£nh v√†o database
    user.avatar = req.file.path; // Cloudinary t·ª± ƒë·ªông l∆∞u URL v√†o req.file.path
    await user.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng", avatar: user.avatar });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};


// üìå API c·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán
exports.updateAvatar = async (req, res) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token, kh√¥ng th·ªÉ x√°c th·ª±c" });

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key");
    } catch (error) {
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    const user = await User.findOne({ idUser: decoded.idUser });
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const { avatar } = req.body;
    if (!avatar) return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p URL ·∫£nh ƒë·∫°i di·ªán" });

    user.avatar = avatar;
    await user.save();

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán th√†nh c√¥ng!",
      avatar: user.avatar,
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};


// üìå API c·∫≠p nh·∫≠t m·∫≠t kh·∫©u
exports.editPassword = async (req, res) => {
  try {
    // L·∫•y token t·ª´ headers
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token, kh√¥ng th·ªÉ x√°c th·ª±c" });

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET || "your_secret_key");
    } catch (error) {
      return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    // T√¨m ng∆∞·ªùi d√πng d·ª±a v√†o ID
    const user = await User.findOne({ idUser: decoded.idUser });
    if (!user) return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    const { oldPassword, newPassword } = req.body;

    // Ki·ªÉm tra xem m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c" });

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    // L∆∞u m·∫≠t kh·∫©u m·ªõi v√†o database
    await user.save();

    res.status(200).json({ message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ H√†m t·∫°o OTP ng·∫´u nhi√™n
const generateOTP = () => Math.floor(100000 + Math.random() * 900000).toString();

// üü¢ API Qu√™n m·∫≠t kh·∫©u - G·ª≠i OTP
exports.forgotPassword = async (req, res) => {
  try {
    const { emailOrUsername } = req.body;

    // T√¨m user theo email ho·∫∑c username
    const user = await User.findOne({
      $or: [{ email: emailOrUsername }, { username: emailOrUsername }]
    });

    if (!user) {
      return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    // T·∫°o OTP ng·∫´u nhi√™n & th·ªùi gian h·∫øt h·∫°n (10 ph√∫t)
    const otpCode = generateOTP();
    const otpExpires = new Date(Date.now() + 10 * 60 * 1000);

    // C·∫≠p nh·∫≠t OTP v√†o database
    user.otpCode = otpCode;
    user.otpExpires = otpExpires;
    await user.save();

    // G·ª≠i OTP qua email
    await sendEmail(user.email, "M√£ OTP Qu√™n M·∫≠t Kh·∫©u", `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}`);

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i, vui l√≤ng ki·ªÉm tra email." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ API X√°c th·ª±c OTP khi qu√™n m·∫≠t kh·∫©u
exports.verifyPassOTP = async (req, res) => {
  try {
    const { email, otpCode } = req.body;

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    if (!user.otpCode || user.otpCode !== otpCode) {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng ch√≠nh x√°c" });
    }

    if (user.otpExpires < new Date()) {
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n" });
    }

    // N·∫øu OTP h·ª£p l·ªá, tr·∫£ v·ªÅ x√°c nh·∫≠n ƒë·ªÉ ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
    res.status(200).json({ message: "OTP h·ª£p l·ªá, h√£y ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};


// üü¢ API ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi
exports.resetPassword = async (req, res) => {
  try {
    const { email, newPassword } = req.body;

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;

    // X√≥a OTP sau khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng
    user.otpCode = null;
    user.otpExpires = null;

    await user.save();

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ API y√™u c·∫ßu ƒë·ªïi mail kh√°c
exports.requestChangeEmail = async (req, res) => {
  try {
    const { idUser, newEmail } = req.body;

    const user = await User.findOne({ idUser });
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    // Ki·ªÉm tra email m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a
    const emailExists = await User.findOne({ email: newEmail });
    if (emailExists) {
      return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    // T·∫°o OTP
    const otpCode = generateOTP();
    const otpExpires = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

    // C·∫≠p nh·∫≠t user v·ªõi OTP v√† email m·ªõi
    user.newEmail = newEmail;
    user.otpCode = otpCode;
    user.otpExpires = otpExpires;
    await user.save();

    // G·ª≠i OTP ƒë·∫øn email m·ªõi
    await sendEmail(newEmail, "X√°c nh·∫≠n thay ƒë·ªïi email", `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}`);

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email m·ªõi." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ API x√°c th·ª±c otp ƒë·ªïi mail kh√°c
exports.verifyChangeEmail = async (req, res) => {
  try {
    const { idUser, otpCode, newEmail } = req.body;

    const user = await User.findOne({ idUser });
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    if (!user.otpCode || user.otpCode !== otpCode) {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng ch√≠nh x√°c." });
    }

    if (user.otpExpires < new Date()) {
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n." });
    }

    if (!newEmail) {
      return res.status(400).json({ message: "Email m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    // Ki·ªÉm tra xem email m·ªõi c√≥ b·ªã tr√πng kh√¥ng
    const emailExists = await User.findOne({ email: newEmail });
    if (emailExists) {
      return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    // C·∫≠p nh·∫≠t email m·ªõi
    user.email = newEmail;
    user.otpCode = null;
    user.otpExpires = null;
    await user.save();

    res.status(200).json({ message: "Email ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ API y√™u c·∫ßu ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i m·ªõi
exports.requestChangePhoneNumber = async (req, res) => {
  try {
    const { idUser, newPhoneNumber } = req.body;

    const user = await User.findOne({ idUser });
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a
    const phoneExists = await User.findOne({ phone: newPhoneNumber });
    if (phoneExists) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    // T·∫°o OTP
    const otpCode = generateOTP();
    const otpExpires = new Date(Date.now() + 10 * 60 * 1000);

    // L∆∞u OTP v√†o user
    user.otpCode = otpCode;
    user.otpExpires = otpExpires;
    await user.save();

    // G·ª≠i OTP ƒë·∫øn s·ªë ƒëi·ªán tho·∫°i m·ªõi
    await sendEmail(user.email, "X√°c nh·∫≠n thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i", `M√£ OTP c·ªßa b·∫°n l√†: ${otpCode}`);

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};

// üü¢ API x√°c th·ª±c OTP ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i m·ªõi
exports.verifyChangePhoneNumber = async (req, res) => {
  try {
    const { idUser, otpCode, newPhoneNumber } = req.body;

    const user = await User.findOne({ idUser });
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i." });
    }

    if (!user.otpCode || user.otpCode !== otpCode) {
      return res.status(400).json({ message: "M√£ OTP kh√¥ng ch√≠nh x√°c." });
    }

    if (user.otpExpires < new Date()) {
      return res.status(400).json({ message: "M√£ OTP ƒë√£ h·∫øt h·∫°n." });
    }

    if (!newPhoneNumber) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
    }

    // Ki·ªÉm tra xem s·ªë ƒëi·ªán tho·∫°i m·ªõi c√≥ b·ªã tr√πng kh√¥ng
    const phoneExists = await User.findOne({ phone: newPhoneNumber });
    if (phoneExists) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng." });
    }

    // C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i m·ªõi
    user.phone = newPhoneNumber;
    user.otpCode = null;
    user.otpExpires = null;
    await user.save();

    res.status(200).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
};
